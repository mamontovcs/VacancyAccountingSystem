// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VacancyAccountingSystem.Data;

namespace VacancyAccountingSystem.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210603201422_AddProperty")]
    partial class AddProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VacancyAccountingSystem.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserFK")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("LoginFK")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyFK")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Offers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFK");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.VacancySpecialist", b =>
                {
                    b.Property<int>("VacancyId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialistId")
                        .HasColumnType("int");

                    b.HasKey("VacancyId", "SpecialistId");

                    b.HasIndex("SpecialistId");

                    b.ToTable("VacancySpecialists");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Company", b =>
                {
                    b.HasBaseType("VacancyAccountingSystem.Models.User");

                    b.Property<string>("AboutCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Specialist", b =>
                {
                    b.HasBaseType("VacancyAccountingSystem.Models.User");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DesiredSalary")
                        .HasColumnType("float");

                    b.Property<string>("EmploymentOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technologies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.ToTable("Specialist");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.User", b =>
                {
                    b.HasOne("VacancyAccountingSystem.Models.Login", "Login")
                        .WithOne("User")
                        .HasForeignKey("VacancyAccountingSystem.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyAccountingSystem.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Vacancy", b =>
                {
                    b.HasOne("VacancyAccountingSystem.Models.Company", "Company")
                        .WithMany("OpenedVacancies")
                        .HasForeignKey("CompanyFK");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.VacancySpecialist", b =>
                {
                    b.HasOne("VacancyAccountingSystem.Models.Specialist", "Specialist")
                        .WithMany("VacancySpecialists")
                        .HasForeignKey("SpecialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacancyAccountingSystem.Models.Vacancy", "Vacancy")
                        .WithMany("VacancySpecialists")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialist");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Company", b =>
                {
                    b.HasOne("VacancyAccountingSystem.Models.User", null)
                        .WithOne()
                        .HasForeignKey("VacancyAccountingSystem.Models.Company", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Specialist", b =>
                {
                    b.HasOne("VacancyAccountingSystem.Models.User", null)
                        .WithOne()
                        .HasForeignKey("VacancyAccountingSystem.Models.Specialist", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Login", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Vacancy", b =>
                {
                    b.Navigation("VacancySpecialists");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Company", b =>
                {
                    b.Navigation("OpenedVacancies");
                });

            modelBuilder.Entity("VacancyAccountingSystem.Models.Specialist", b =>
                {
                    b.Navigation("VacancySpecialists");
                });
#pragma warning restore 612, 618
        }
    }
}
